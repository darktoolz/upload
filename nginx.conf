daemon off;
user nginx;
worker_processes auto;
pcre_jit on;
pid /run/nginx.pid;
error_log stderr;
include modules/*.conf;
events {}
http {
  include       mime.types;
  resolver 127.0.0.11 ipv6=off;
	lua_code_cache on;
	lua_need_request_body on;

	root /var/www;
	client_body_temp_path /var/www/tmp;

	client_max_body_size 0;
	client_body_buffer_size 8192m;
	client_body_in_single_buffer on;
	client_body_timeout 6000s;
	client_body_in_file_only on;
	proxy_max_temp_file_size 0;

	default_type application/octet-stream;
	server_tokens off;
	sendfile on;
	tcp_nopush on;
	access_log /dev/null;

	init_by_lua_block {
		math.randomseed(ngx.time())
		os.execute("mkdir -p /var/www/tmp")
	}
	map $request_method $ouri {
		GET $md5f;
		default $uri;
	}
	server {
		etag on;
		listen 80 default_server;
		index index.txt;
		server_name _;
		error_page  405     =200 @upload;

		location = / {
      root /var/lib/nginx/html;
			default_type text/html;
			try_files /index.html =404;
		}
		location = /index.html {
      root /var/lib/nginx/html;
			default_type text/html;
			try_files /index.html =404;
		}
		location = /upload.sh {
      root /var/lib/nginx/html;
			default_type text/plain;
			try_files /upload.sh =404;
		}

		set_by_lua_block $md5f {
			return ngx.md5(string.lower(ngx.re.sub(ngx.var.uri, "^/",'')))
		}
		location / {
			default_type application/octet-stream;
			try_files $uri /$ouri @upload;
		}
		location /tmp {
			return 404;
		}
		location @upload {
			add_header Allow "GET, POST, PUT, DELETE, HEAD" always;
			default_type text/plain;
			content_by_lua_block {
local function randstr(n)
	local zs = "qwertyuiop[]asdfghjkl;'zxcvbnm,./`12344567890-=\""
	local rv = ""
	for i=1,n do
		local a = math.random(1,#zs)
		local b = zs.sub(a,1)
		rv = rv..b
	end
	return rv
end

local orig_uri = ngx.var.uri
local orig_uri_lowered_pre = string.lower(ngx.var.uri)
local is_deleting = (orig_uri_lowered_pre:sub(-7) == '/delete')
local orig_uri_lowered = ngx.re.sub(orig_uri_lowered_pre, "/delete$", '')
local uri_hashable = ngx.re.sub(orig_uri_lowered, "^/", '')
local orig_base_uri = ngx.re.sub(orig_uri_lowered, "^(.*/)([^/]+)$", '$2')
local uri_prefix = ngx.re.sub(orig_uri_lowered, "^(.*/)[^/]+$", '$1')
uri_prefix = ngx.re.sub(uri_prefix, "^/", '')
uri_prefix = ngx.re.sub(uri_prefix, "/$", '')
if #uri_prefix<1 and uri_hashable==orig_base_uri then
	uri_prefix = ngx.md5(orig_base_uri..uri_prefix..math.random(0,8)):sub(1,8)
end
local link_short = (uri_hashable==orig_base_uri) and uri_prefix..'/'..uri_hashable or uri_hashable
local uri_hashed = ngx.md5(link_short)

local path = ngx.var.document_root..'/'..uri_hashed
local link = ngx.var.scheme..'://'..ngx.var.host..'/'..link_short

local exists = false
local t = io.open(path, 'r')
if t then
	exists = true
	t:close()
end

if ngx.req.get_method() == 'PUT' or ngx.req.get_method() == 'POST' then
    ngx.header.content_type = "text/plain"
	if exists then
		os.remove(path)
	end
	local body_file = ngx.req.get_body_file()
	os.rename(body_file, path)
	ngx.say(link)
	ngx.say(link..'/delete')
end

if ngx.req.get_method() == 'DELETE' or is_deleting then
	if exists then
		os.remove(path)
		ngx.header['DELETED']=link
		ngx.say('DELETED '..link)
	end
end

if ngx.req.get_method() == 'HEAD' then
	if exists then
		ngx.header['GET']=link
		ngx.header['DELETE']=link..'/delete'
	else
		ngx.status = 404
	end
end

if ngx.req.get_method() == 'GET' and not is_deleting then
	if not exists then
		ngx.status = 404
		ngx.say('404 not found '..link)
	end
end
			}
		}
	}
}
